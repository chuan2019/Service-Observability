# Development version with hot reloading and local source mounting
services:
  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: jaeger-dev
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
      - "6831:6831/udp"  # Jaeger agent UDP
      - "6832:6832/udp"  # Jaeger agent UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - tracing-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # FastAPI Application - Main Service (Development with volume mount)
  fastapi-main:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    container_name: fastapi-main-dev
    ports:
      - "8000:8000"
    environment:
      - SERVICE_NAME=fastapi-main
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=4318
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app:ro
      - ./config:/app/config:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
    depends_on:
      jaeger:
        condition: service_healthy
    networks:
      - tracing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # FastAPI Application - User Service (Development)
  fastapi-user-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    container_name: fastapi-user-service-dev
    ports:
      - "8001:8000"
    environment:
      - SERVICE_NAME=user-service
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=4318
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app:ro
      - ./config:/app/config:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
    depends_on:
      jaeger:
        condition: service_healthy
    networks:
      - tracing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # FastAPI Application - Order Service (Development)
  fastapi-order-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    container_name: fastapi-order-service-dev
    ports:
      - "8002:8000"
    environment:
      - SERVICE_NAME=order-service
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=4318
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app:ro
      - ./config:/app/config:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
    depends_on:
      jaeger:
        condition: service_healthy
    networks:
      - tracing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # FastAPI Application - Payment Service (Development)
  fastapi-payment-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    container_name: fastapi-payment-service-dev
    ports:
      - "8003:8000"
    environment:
      - SERVICE_NAME=payment-service
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=4318
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app:ro
      - ./config:/app/config:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
    depends_on:
      jaeger:
        condition: service_healthy
    networks:
      - tracing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    networks:
      - tracing-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for demo data (optional)
  postgres:
    image: postgres:15-alpine
    container_name: postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=demo_db
      - POSTGRES_USER=demo_user
      - POSTGRES_PASSWORD=demo_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - tracing-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo_user -d demo_db"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  tracing-network:
    driver: bridge

volumes:
  postgres-data: